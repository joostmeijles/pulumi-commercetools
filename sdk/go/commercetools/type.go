// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package commercetools

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Type struct {
	pulumi.CustomResourceState

	Description     pulumi.MapOutput         `pulumi:"description"`
	Fields          TypeFieldArrayOutput     `pulumi:"fields"`
	Key             pulumi.StringOutput      `pulumi:"key"`
	Name            pulumi.MapOutput         `pulumi:"name"`
	ResourceTypeIds pulumi.StringArrayOutput `pulumi:"resourceTypeIds"`
	Version         pulumi.IntOutput         `pulumi:"version"`
}

// NewType registers a new resource with the given unique name, arguments, and options.
func NewType(ctx *pulumi.Context,
	name string, args *TypeArgs, opts ...pulumi.ResourceOption) (*Type, error) {
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.ResourceTypeIds == nil {
		return nil, errors.New("missing required argument 'ResourceTypeIds'")
	}
	if args == nil {
		args = &TypeArgs{}
	}
	var resource Type
	err := ctx.RegisterResource("commercetools:index/type:Type", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetType gets an existing Type resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TypeState, opts ...pulumi.ResourceOption) (*Type, error) {
	var resource Type
	err := ctx.ReadResource("commercetools:index/type:Type", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Type resources.
type typeState struct {
	Description     map[string]interface{} `pulumi:"description"`
	Fields          []TypeField            `pulumi:"fields"`
	Key             *string                `pulumi:"key"`
	Name            map[string]interface{} `pulumi:"name"`
	ResourceTypeIds []string               `pulumi:"resourceTypeIds"`
	Version         *int                   `pulumi:"version"`
}

type TypeState struct {
	Description     pulumi.MapInput
	Fields          TypeFieldArrayInput
	Key             pulumi.StringPtrInput
	Name            pulumi.MapInput
	ResourceTypeIds pulumi.StringArrayInput
	Version         pulumi.IntPtrInput
}

func (TypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*typeState)(nil)).Elem()
}

type typeArgs struct {
	Description     map[string]interface{} `pulumi:"description"`
	Fields          []TypeField            `pulumi:"fields"`
	Key             string                 `pulumi:"key"`
	Name            map[string]interface{} `pulumi:"name"`
	ResourceTypeIds []string               `pulumi:"resourceTypeIds"`
}

// The set of arguments for constructing a Type resource.
type TypeArgs struct {
	Description     pulumi.MapInput
	Fields          TypeFieldArrayInput
	Key             pulumi.StringInput
	Name            pulumi.MapInput
	ResourceTypeIds pulumi.StringArrayInput
}

func (TypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*typeArgs)(nil)).Elem()
}
