// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package commercetools

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type State struct {
	pulumi.CustomResourceState

	Description pulumi.MapOutput         `pulumi:"description"`
	Initial     pulumi.BoolPtrOutput     `pulumi:"initial"`
	Key         pulumi.StringOutput      `pulumi:"key"`
	Name        pulumi.MapOutput         `pulumi:"name"`
	Roles       pulumi.StringArrayOutput `pulumi:"roles"`
	Transitions pulumi.StringArrayOutput `pulumi:"transitions"`
	Type        pulumi.StringOutput      `pulumi:"type"`
	Version     pulumi.IntOutput         `pulumi:"version"`
}

// NewState registers a new resource with the given unique name, arguments, and options.
func NewState(ctx *pulumi.Context,
	name string, args *StateArgs, opts ...pulumi.ResourceOption) (*State, error) {
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &StateArgs{}
	}
	var resource State
	err := ctx.RegisterResource("commercetools:index/state:State", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetState gets an existing State resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetState(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StateState, opts ...pulumi.ResourceOption) (*State, error) {
	var resource State
	err := ctx.ReadResource("commercetools:index/state:State", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering State resources.
type stateState struct {
	Description map[string]interface{} `pulumi:"description"`
	Initial     *bool                  `pulumi:"initial"`
	Key         *string                `pulumi:"key"`
	Name        map[string]interface{} `pulumi:"name"`
	Roles       []string               `pulumi:"roles"`
	Transitions []string               `pulumi:"transitions"`
	Type        *string                `pulumi:"type"`
	Version     *int                   `pulumi:"version"`
}

type StateState struct {
	Description pulumi.MapInput
	Initial     pulumi.BoolPtrInput
	Key         pulumi.StringPtrInput
	Name        pulumi.MapInput
	Roles       pulumi.StringArrayInput
	Transitions pulumi.StringArrayInput
	Type        pulumi.StringPtrInput
	Version     pulumi.IntPtrInput
}

func (StateState) ElementType() reflect.Type {
	return reflect.TypeOf((*stateState)(nil)).Elem()
}

type stateArgs struct {
	Description map[string]interface{} `pulumi:"description"`
	Initial     *bool                  `pulumi:"initial"`
	Key         string                 `pulumi:"key"`
	Name        map[string]interface{} `pulumi:"name"`
	Roles       []string               `pulumi:"roles"`
	Transitions []string               `pulumi:"transitions"`
	Type        string                 `pulumi:"type"`
}

// The set of arguments for constructing a State resource.
type StateArgs struct {
	Description pulumi.MapInput
	Initial     pulumi.BoolPtrInput
	Key         pulumi.StringInput
	Name        pulumi.MapInput
	Roles       pulumi.StringArrayInput
	Transitions pulumi.StringArrayInput
	Type        pulumi.StringInput
}

func (StateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stateArgs)(nil)).Elem()
}
