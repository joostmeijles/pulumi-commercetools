// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class State extends pulumi.CustomResource {
    /**
     * Get an existing State resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StateState, opts?: pulumi.CustomResourceOptions): State {
        return new State(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commercetools:index/state:State';

    /**
     * Returns true if the given object is an instance of State.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is State {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === State.__pulumiType;
    }

    public readonly description!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly initial!: pulumi.Output<boolean | undefined>;
    public readonly key!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<{[key: string]: any}>;
    public readonly roles!: pulumi.Output<string[] | undefined>;
    public readonly transitions!: pulumi.Output<string[] | undefined>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a State resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StateArgs | StateState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as StateState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["initial"] = state ? state.initial : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["roles"] = state ? state.roles : undefined;
            inputs["transitions"] = state ? state.transitions : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as StateArgs | undefined;
            if (!args || args.key === undefined) {
                throw new Error("Missing required property 'key'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["initial"] = args ? args.initial : undefined;
            inputs["key"] = args ? args.key : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["roles"] = args ? args.roles : undefined;
            inputs["transitions"] = args ? args.transitions : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(State.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering State resources.
 */
export interface StateState {
    readonly description?: pulumi.Input<{[key: string]: any}>;
    readonly initial?: pulumi.Input<boolean>;
    readonly key?: pulumi.Input<string>;
    readonly name?: pulumi.Input<{[key: string]: any}>;
    readonly roles?: pulumi.Input<pulumi.Input<string>[]>;
    readonly transitions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly type?: pulumi.Input<string>;
    readonly version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a State resource.
 */
export interface StateArgs {
    readonly description?: pulumi.Input<{[key: string]: any}>;
    readonly initial?: pulumi.Input<boolean>;
    readonly key: pulumi.Input<string>;
    readonly name?: pulumi.Input<{[key: string]: any}>;
    readonly roles?: pulumi.Input<pulumi.Input<string>[]>;
    readonly transitions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly type: pulumi.Input<string>;
}
